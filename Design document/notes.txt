components:
1- CitizenMobileApp
2- CitizenWebApp
3- AuthorityMobileApp
4- AuthorityWebApp
5- AdministratorApp
6- Router
7- AuthenticationManager
8- ReportManager
9- AreaManager
10- StatisticsProvider
11- PictureAnalyzer
12- TrafficTicketGenerator
13- SystemManagerInterface

requirements traceability:

[R1] The system must allow new users to sign up by providing personal/mandatory information;
	- authentication manager
[R2] The system must be able to authenticate registered users;
	- authentication manager
[R4] The system must be able to analyze pictures that are being submitted in a report and recognize whether the license plate is readable/present or not;
	- picture analyzer

[R3] The citizen must be able to insert relevant data about violations, such as type of violation, during the filling out process;
	- citizen web app
[R5] The system must inform the user whether their report has been stored successfully or not;
	- report manager
[R6] The system must ask the user if they want to retry the submission process using the same data that failed being sent, or if they want to cancel it;
	- citizen mobile app
	- authority web app
[R7] The system must be able to distinguish every user unambiguously;
	- authentication manager
[R8] The system must store information with an association to the user who submitted it;
	- report manager/authentication manager
[R9] The system must be able to retrieve stored information;
	- report manager/authentication manager
[R10] The system must allow reports to have only one status at a time (accepted, rejected, to be checked);
	- report manager
[R11] The system must tell the user whether their report has been accepted, rejected or is still waiting to be checked;
	- authentication manager
	- citizen app
[R12] The system must be able to distinguish between authorities and citizens;
	- auth manager
[R13] The system must be able to distinguish between submitted reports and reports that have been reviewed and accepted by the police;
	- report manager
[R14] The system must anonymize data shown to regular users (citizens), that is hide information about the vehicles that were parked illegally and about who submitted a particular report; in other words, data about reports that is shown to users must only contain the type of violation, date, time and position;
	- (authentication manager)
	- statistics manager
[R15] The system must show the full data about a report to authorities;
	- authentication manager
[R16] An authority must be able to submit reports about accidents;
	- authentication manager
[R17] An authority must be able to insert relevant information about the occurred accident, such as location and injured people; (contained in R16?)
	- authentication manager
[R18] The system must be able to access map information;
	- area manager
[R19] The system must show the user their local map information;
	- area manager
[R20] The system must show the user possible solutions for unsafe areas, if there are any;
	- authentication manager
	- area manager
[R21] The system must allow system managers to edit the status of an area as unsafe and the other way around;
	- system manager interface
[R22] An authority must be able to generate a traffic ticket from a report;
	- traffic ticket generator
[R23] The system must offer the possibility to generate a traffic ticket only to reports which has the status of accepted;
	- report manager
	- traffic ticket generator
[R24] The system must allow Authorities to know which Citizen sent each report;
	- report manager
	- auth manager
[R25] The system must be able to compute meaningful statistics on reports about each kind of violation in which a traffic ticket has been generated;
	- statistics provider
[R26] The system must make data about statistics visible to all users;
	- authentication manager
[R27] The system must allow system managers to suggest interventions for unsafe areas;
	- sys manager interface
[R28] The system must make data about suggested interventions visible to all users;
	- authentication manager

FUNCTIONALITIES:

CitizenMobileApp:
	- authentication OK
	- report violation OK
	- view unsafe areas OK
	- view areas with many violations OK
	- view reports history OK
	- view statistics OK

CitizenWebApp:
	- authentication OK
	- view unsafe areas OK
	- view area with many violations OK
	- view reports history OK
	- view statistics OK

AuthorityMobileApp:
	- authentication OK
	- view unsafe areas OK
	- view areas with many violations OK
	- view reports of area of competence OK
	- view statistics OK

AuthorityWebApp:
	- authentication OK
	- view unsafe areas OK
	- send report about accidents
	- view areas with many violations OK
	- view reports of area of competence OK
	- view statistics OK
	- evaluate reports OK
	- generate tickets with amount to pay OK

AdministratorDataEditing:
	- authentication OK
	- view unsafe areas OK
	- suggest intervention OK

In order to make sure every functional and non-functional requirement, as well as the imposed availability and flexibility constraints, could be fulfilled, we opted to utilize the following architectural styles and patterns for developing the system.

	Object-oriented Design

Developers should be faithful to the five basic concepts of Object Oriented Design, which are listed hereunder:
- Object/Class: the correspondence between data structures and the functions/methods that interact with the data;
- Information hiding: the ability to protect some components of the object from external entities;
- Inheritance: the ability of a class to extend or override functionalities of another class;
	- Interface: the ability to defer the implementation of a method;
	- Polymorphism: the ability to replace an object with its sub-objects;


	Client/Server Architecture

This architectural style was chosen to ensure that the logic layer of the system, which requires a considerably large amount of computational power, could be deployed on a rack of servers, leaving the client applications thinner and limited to a small number of functionalities.


	Three-Tier Physical Architecture

In Three-Tier Architectures, the presentation, application and data layers are split into just as many dedicated machines, meaning: end-user devices, a rack of intermediate servers (also called middle tier) and the DBMS. This kind of architecture guarantees a greater opportunity at reaching the desired levels of flexibility and scalability, as well as security, since the data access is separated from the clients by the middle tier.



	RESTful Architecture

As far as client and server communication goes, we chose to employ a RESTful API, as its principles apply well to the characteristics and needs of the system to be developed. As a matter of fact, REST:
	- is a client-server architecture;
- is stateless: all the information needed to perform a request is always contained in each communication between server and client, and session state information is only needed on the client-side. Hence, if authentication is required in order to access a resource, the client needs to authenticate itself with every request;
- is cacheable: performance can be improved by caching some information on intermediary devices;
- provides a uniform interface: each device communicating with the API follows the same rules;
- is layered: each device can only see the components of the architecture which it’s communicating with and not what lies beyond, meaning each component is independent from the others and can generally be easily replaced or extended.


